package org.pleungms.dockerize;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.*;

import java.util.*;

import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionJavaKeyStoreProvider;
import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionKeyStoreProvider;
import com.microsoft.sqlserver.jdbc.SQLServerException;
import com.microsoft.sqlserver.jdbc.*;

import static spark.Spark.get;

/**
 * Created by pleungms
 */
public class demoappjavaweb {

    static final String DEFAULT_USER = "World";
    static int    numRows;
    static ResultSet rs;
    static String rsString;

    public static void main(String[] args) {

		String resStatus = "init";
		String resRow = "";

		numRows = 0;
		rsString = "";

		//String sqlStmt = "SELECT * FROM TBL_PRO_PROFILES";
		String sqlStmt = "SELECT ID, TXT, SECRET_TXT FROM TEST_ENCRYPT_TBL";

		//String connectionUrl = "jdbc:sqlserver://<server>:<port>;user=<user>;password=<password>";

		// Connection String without Encryption
		//String connectionUrl = "jdbc:sqlserver://pleungms.database.windows.net:1433;database=PLEUNGDB;user=pleungadmin@pleungms;password=!P@ssw0rd;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;";

		// Connection string with Encryption
		String connectionUrl = "jdbc:sqlserver://pleungms.database.windows.net:1433;database=PLEUNGDB;user=pleungadmin@pleungms;password=!P@ssw0rd;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;columnEncryptionSetting=Enabled;";

        //SQLServerConnection connection = (SQLServerConnection) DriverManager.getConnection(connectionUrl);

    // Appid for demoappnode
    //String clientID = "31c32d56-1952-4205-b03e-604a71061684";
    // Key1 for demoappnode
    //String clientKey = "5MTK6YIsYBCS/IqdJfwmFJXTbSz8pxO0x0Xrpkh4Qeo=";


    // Appid for School 1
    String clientID = "668deea9-af08-47b2-8c81-eb0fec6c904f";
    // Key1 for Test App
    String clientKey = "8vQXYxF+0JFTu8aPlulVEmiZQk1Yr9fdYcm/B34tm6Y=";


    //SQLServerColumnEncryptionAzureKeyVaultProvider akvProvider = new SQLServerColumnEncryptionAzureKeyVaultProvider(clientID, clientKey);
    //Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();
    //keyStoreMap.put(akvProvider.getName(), akvProvider);
    //SQLServerConnection.registerColumnEncryptionKeyStoreProviders(keyStoreMap);
    //String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=<databaseName>;user=<user>;password=<password>;columnEncryptionSetting=Enabled;";


      //  try (Connection connection = DriverManager.getConnection(connectionUrl);
      //           PreparedStatement selectStatement = connection.prepareStatement(sqlStmt);) {
            //ResultSet rs = selectStatement.executeQuery();

        try {

            Connection connection = DriverManager.getConnection(connectionUrl);

            //////////////////////////////////////////////////////////////////
            // SQL Server encryption
            System.out.println("Starting to get SQLServerColumnEncryptionAzureKeyVaultProvider...");
 			SQLServerColumnEncryptionAzureKeyVaultProvider akvProvider = new SQLServerColumnEncryptionAzureKeyVaultProvider(clientID, clientKey);

 			System.out.println("Starting to get keyStoreMap...");
            Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();

            System.out.println("Starting to put keyStoreMap...");
            keyStoreMap.put(akvProvider.getName(), akvProvider);

            System.out.println("Starting to update SQLServerConnection...");
            SQLServerConnection.registerColumnEncryptionKeyStoreProviders(keyStoreMap);

            System.out.println("Completed SQL Server encryption!");

            //////////////////////////////////////////////////////////////////

            System.out.println("Preparing SQL Statement...");
            PreparedStatement selectStatement = connection.prepareStatement(sqlStmt);

            System.out.println("Executing SQL Statement...");
            rs = selectStatement.executeQuery();

            System.out.println("Executed statement successful!");

            while (rs.next()) {

                //resRow = "[ " + rs.getString("PRO_ID") + " " + rs.getString("PRO_NAME") + " " + rs.getString("PRO_EMAIL") + " ] ";
                resRow = "[" + rs.getString("ID") + "," + rs.getString("TXT") + "," + rs.getString("SECRET_TXT") + "]";

                System.out.println(resRow);
                rsString += resRow;
                numRows++;
            }
		}
        // Handle any errors that may have occurred.
	    catch (SQLException e) {
	        e.printStackTrace();
        } // try connection

        get("/", (req, res) -> String.format("[demoappjavaweb using Always Encrypted] %s", getRsString()));
    }

    public static String getUsername() {
        // 1. check for presence of environment variable
        String user = System.getenv("USER");
        if(user == null) {
            // 2. load from properties file, if available
            Properties props = new Properties();
            try(InputStream instream = new FileInputStream("/data/application.properties")) {
                props.load(instream);
                return props.getProperty("user.name", DEFAULT_USER);
            }
            catch(IOException e) {
                return DEFAULT_USER;
            }
        }
        return user;
    }

    public static int getNumRows() {
		return numRows;
    }

    public static String getRsString() {
		return rsString;
    }
}
